@property --degree {
    syntax: "<angle>";
    inherits: false;
    initial-value: 0deg
}

.diagram {
    width: min(50rem, 100%);
    display: grid;
    grid-template-columns: 600px auto;
    grid-auto-rows: 100px;
    column-gap: 1rem;
    position: absolute;
}

@media (width < 20rem ) {
    .diagram {
        grid-template-columns: 1fr;
        place-items: center
    }
}

.diagram > .item {
    display: contents
}

    .diagram > .item::after {
        content: "";
        grid-column: 1;
        place-self: center;
        grid-row: 1 / span 6;
        width: calc(100% - 2rem);
        aspect-ratio: 1;
        border-radius: 50%;
        pointer-events: none;
        --degree: calc(360deg * var(--perc)); 
        background-image: conic-gradient( from 0deg, var(--clr) var(--degree), transparent calc(var(--degree) + .25deg) );
        --width: calc(50% / (var(--items) + .5));
        --start: calc(var(--width) * .5 + var(--width) * var(--idx));
        --stop: calc(var(--start) + var(--width));
        --mask-image: radial-gradient( 100% 100%, transparent 0 calc(var(--start) - 1px), black var(--start) var(--stop), transparent calc(var(--stop) + 1px) );
        -webkit-mask-image: var(--mask-image);
        mask-image: var(--mask-image);
        opacity: var(--opacity, 1);
        transition: opacity 250ms ease;
        animation: degreeIn 5s ease;
    }

@keyframes degreeIn {
    from {
        --degree: 0deg
    }
}

.diagram > .item > label {
    display: flex;
    gap: 0.5rem;
    color: black;
    font-family: system-ui, sans-serif;
    align-items: center;
    padding-block: 0.5rem;
}

    .diagram > .item > label::before {
        content: "▣";
        color: var(--clr)
    }

.diagram > .item:where(:hover,:focus) > label {
    color: var(--clr)
}

.diagram:has(>.item>label:where(:hover,:focus)) > .item:not(:where(:hover,:focus))::after {
    --opacity: 0.1
}

@supports not selector(:has(p)) {
    .diagram:hover > :not(.item:where(:hover, :focus))::after {
        --opacity: 0.1
    }
}